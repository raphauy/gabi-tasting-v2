// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  SUPER_ADMIN
  ADMIN
  TASTER
  WINERY
  GUEST
}

model User {
  id            String    @id @default(cuid())
  name          String?                             // gennext: show.column
  email         String    @unique                   // gennext: show.column
  emailVerified DateTime?                           // gennext: show.column
  image         String?
  role          Role      @default(GUEST)           // gennext: show.column
  accounts      Account[]                           // gennext: skip.list
  sessions      Session[]                           // gennext: skip.list
  otpConfirmations OTPSession[]                     // gennext: skip.list

  wineCriticId String?
  wineCritic WineCritic? @relation(fields: [wineCriticId], references: [id], onDelete: Cascade)

  wineryId String?
  winery Winery? @relation(fields: [wineryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())                // gennext: skip.zod
  updatedAt DateTime @updatedAt                     // gennext: skip.zod show.column

  @@map("users")                                    // gennext: skip.list skip.zod
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
 
model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
  @@map("otp_codes")
}

model OTPSession {
  id String @id @default(cuid())

  tokenCheckExpiration DateTime?              // gennext: show.column
  deviceBrowser String?                       // gennext: show.column
  deviceOs String?                            // gennext: show.column
  ipAddress String?                           // gennext: show.column
  city String?                                // gennext: show.column
  country String?                             // gennext: show.column

  createdAt DateTime @default(now())          // gennext: show.column skip.zod
  updatedAt DateTime @updatedAt               // gennext: show.column skip.zod

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_sessions")                  // gennext: skip.list skip.zod
}

model WineCritic {
  id            String    @id @default(cuid())
  name          String                              // gennext: show.column
  slug          String    @unique                   // gennext: show.column
  description   String?                             // gennext: show.column

  wineries      Winery[]                              // gennext: skip.list
  users         User[]                              // gennext: skip.list
  tastings      Tasting[]                           // gennext: skip.list

  createdAt     DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt     DateTime @updatedAt                 // gennext: show.column skip.zod

  @@map("wine_critics")                             // gennext: skip.list skip.zod
}

model Tasting {
  id            String    @id @default(cuid())
  name          String                              // gennext: show.column
  slug          String    @unique                   // gennext: show.column
  description   String?                             // gennext: show.column

  wineCriticId  String
  wineCritic    WineCritic @relation(fields: [wineCriticId], references: [id], onDelete: Cascade)

  wineries      WineryTasting[]                     // gennext: skip.list
  wines         WineTasting[]                       // gennext: skip.list
  tastingDays   TastingDay[]                        // gennext: skip.list

  createdAt     DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt     DateTime @updatedAt                 // gennext: show.column skip.zod

  @@map("tastings")                                 // gennext: skip.list skip.zod
}

model Winery {
  id            String    @id @default(cuid())
  name          String                              // gennext: show.column
  slug          String    @unique                   // gennext: show.column
  description   String?                             // gennext: show.column
  image         String?                             // gennext: show.column

  wineCriticId  String
  wineCritic    WineCritic @relation(fields: [wineCriticId], references: [id], onDelete: Cascade)

  users         User[]                              // gennext: skip.list
  tastings      WineryTasting[]                     // gennext: skip.list
  wines         Wine[]                              // gennext: skip.list
  tastingDays   TastingDayWinery[]                  // gennext: skip.list

  createdAt     DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt     DateTime @updatedAt                 // gennext: show.column skip.zod

  @@map("wineries")                                 // gennext: skip.list skip.zod
}

model WineryTasting {
  order         Int @default(0)

  wineryId      String
  winery        Winery   @relation(fields: [wineryId], references: [id], onDelete: Cascade)
  tastingId     String
  tasting       Tasting  @relation(fields: [tastingId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt     DateTime @updatedAt                 // gennext: show.column skip.zod

  @@id([wineryId, tastingId])                       // gennext: skip.list skip.zod
  @@map("winery_tastings")                          // gennext: skip.list skip.zod
}

enum WineStyle {
  RED
  WHITE
  ROSÃ‰
  SPARKLING
  FORTIFIED
  ORANGE
  OTHER
}

model Wine {
  id                String    @id @default(cuid())
  name              String                              // gennext: show.column
  vintage           String                              // gennext: show.column
  grapes            String @default("")                 // gennext: show.column
  region            String                              // gennext: show.column
  style             WineStyle                           // gennext: show.column
  abv               Float?                              // gennext: show.column
  price             Float?                              // gennext: show.column
  technicalFileUrl  String?                             // gennext: show.column
  technicalFileName String?                             // gennext: show.column

  wineryId          String
  winery            Winery @relation(fields: [wineryId], references: [id], onDelete: Cascade)

  tastings          WineTasting[]                       // gennext: skip.list
  review            Review?                             // gennext: skip.list

  createdAt         DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt         DateTime @updatedAt                 // gennext: show.column skip.zod

  @@map("wines")                                        // gennext: skip.list skip.zod
}

model WineTasting {
  score         Int?
  notes         String?

  wineId        String
  wine          Wine     @relation(fields: [wineId], references: [id], onDelete: Cascade)
  tastingId     String
  tasting       Tasting  @relation(fields: [tastingId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt     DateTime @updatedAt                 // gennext: show.column skip.zod

  @@id([wineId, tastingId])                         // gennext: skip.list skip.zod
  @@map("wine_tastings")                            // gennext: skip.list skip.zod
}

model TastingDay {
  id            String    @id @default(cuid())
  date          DateTime?                            // gennext: show.column
  isDefault     Boolean @default(false)
  order         Int @default(0)
  
  tastingId     String
  tasting       Tasting @relation(fields: [tastingId], references: [id], onDelete: Cascade)

  wineries      TastingDayWinery[]                  // gennext: skip.list

  createdAt     DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt     DateTime @updatedAt                 // gennext: show.column skip.zod

  @@map("tasting_days")                             // gennext: skip.list skip.zod
}

model TastingDayWinery {
  order         Int @default(0)

  tastingDayId  String
  tastingDay    TastingDay @relation(fields: [tastingDayId], references: [id], onDelete: Cascade)
  wineryId      String
  winery        Winery   @relation(fields: [wineryId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt     DateTime @updatedAt                 // gennext: show.column skip.zod

  @@id([tastingDayId, wineryId])                    // gennext: skip.list skip.zod
  @@map("tasting_day_wineries")                     // gennext: skip.list skip.zod
}

model Review {
  id                      String    @id @default(cuid())
  
  intensity               String?                              // gennext: show.column
  colour                  String?                              // gennext: show.column
  aromaIntensity          String?                              // gennext: show.column
  
  aromaPrimary            String?                              // gennext: show.column
  aromaSecondary          String?                              // gennext: show.column
  aromaTertiary           String?                              // gennext: show.column
  
  sweetness               String?                              // gennext: show.column
  acidity                 String?                              // gennext: show.column
  alcohol                 String?                              // gennext: show.column
  tannins                 String?                              // gennext: show.column
  tanninsNature           String?                              // gennext: show.column
  body                    String?                              // gennext: show.column
  
  flavourIntensity        String?                              // gennext: show.column
  flavourCharacteristics  String?                              // gennext: show.column
  
  score                   Int?                                 // gennext: show.column
  comments                String?                              // gennext: show.column

  finished                Boolean @default(false)

  wineId                  String    @unique
  wine                    Wine      @relation(fields: [wineId], references: [id], onDelete: Cascade)

  createdAt               DateTime @default(now())            // gennext: show.column skip.zod
  updatedAt               DateTime @updatedAt                 // gennext: show.column skip.zod

  @@map("reviews")                                            // gennext: skip.list skip.zod
}